<?php

namespace AppTest;

use Interop\Http\ServerMiddleware\DelegateInterface;
use PHPUnit\Framework\TestCase as BaseCase;
use Zend\Diactoros\Response\HtmlResponse;
use Zend\Diactoros\ServerRequest;
use Zend\Expressive\Router\RouteResult;
use Zend\Expressive\Router\RouterInterface;

class TestCase extends BaseCase
{
    protected $app;
    protected $container;

    public function __construct($name = null, array $data = [], $dataName = '')
    {
        $container = require 'tests/container.php';

        $this->container = $container;

        parent::__construct($name, $data, $dataName);
    }

    public function request(
        $method = null,
        $uri = null,
        array $queryParams = [],
        array $serverParams = [],
        $parsedBody = null,
        array $headers = [],
        array $uploadedFiles = [],
        $body = 'php://input',
        array $cookies = []
    ) {
        $this->boot();

        /** @var RouterInterface $router */
        $router = $this->container->get(RouterInterface::class);
        $request = new ServerRequest(
            $serverParams,
            $uploadedFiles,
            $uri,
            $method,
            $body,
            $headers,
            $cookies,
            $queryParams,
            $parsedBody
        );
        /** @var RouteResult $routeResult */
        $routeResult = $router->match($request);

        $action = $routeResult->getMatchedMiddleware();
        $delegate = $this->prophesize(DelegateInterface::class);

        /** @var HtmlResponse $response */
        return $action->process($request, $delegate->reveal());
    }

    protected function boot()
    {
        /** @var \Zend\Expressive\Application $app */
        $app = $this->container->get(\Zend\Expressive\Application::class);

        // Import programmatic/declarative middleware pipeline and routing
        // configuration statements
        $pipeline = require 'routes/pipeline.php';
        $routes = require 'routes/routes.php';

//        $app->run();

        $this->app = $app;

    }

    public function tearDown()
    {
        $this->app = null;
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
